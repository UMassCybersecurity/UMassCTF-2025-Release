order = ~(-1 << 512)
mask = 0b


class Cipher:
    def __init__(self, mask, seed):
        print(f'mask={hex(mask)}')
        self.mask = mask
        self.seed = seed

    def next(self):
        self.seed = (self.seed << 1) | ((self.seed & self.mask).bit_count() & 1)
        self.seed &= order
        return self.seed % 5


flag = b'UMASS{REDACTED}'
flag = flag[5:]
print(f'len={len(flag)}')

current = int.from_bytes(flag)
c = Cipher(mask, current)
for _ in range(100):
    c.next()
flag_data = []
for _ in range(520):
    c.next()
    flag_data.append(c.next())
print(f'flag={flag_data}')